# coding: utf-8

"""
    Smoker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AlertClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_id': 'str',
        'sensor_id': 'int',
        'temperatur': 'int',
        'alert_type': 'str'
    }

    attribute_map = {
        'alert_id': 'alertId',
        'sensor_id': 'sensorId',
        'temperatur': 'temperatur',
        'alert_type': 'alertType'
    }

    def __init__(self, alert_id=None, sensor_id=None, temperatur=None, alert_type=None):  # noqa: E501
        """AlertClient - a model defined in Swagger"""  # noqa: E501
        self._alert_id = None
        self._sensor_id = None
        self._temperatur = None
        self._alert_type = None
        self.discriminator = None
        if alert_id is not None:
            self.alert_id = alert_id
        if sensor_id is not None:
            self.sensor_id = sensor_id
        if temperatur is not None:
            self.temperatur = temperatur
        if alert_type is not None:
            self.alert_type = alert_type

    @property
    def alert_id(self):
        """Gets the alert_id of this AlertClient.  # noqa: E501


        :return: The alert_id of this AlertClient.  # noqa: E501
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this AlertClient.


        :param alert_id: The alert_id of this AlertClient.  # noqa: E501
        :type: str
        """

        self._alert_id = alert_id

    @property
    def sensor_id(self):
        """Gets the sensor_id of this AlertClient.  # noqa: E501


        :return: The sensor_id of this AlertClient.  # noqa: E501
        :rtype: int
        """
        return self._sensor_id

    @sensor_id.setter
    def sensor_id(self, sensor_id):
        """Sets the sensor_id of this AlertClient.


        :param sensor_id: The sensor_id of this AlertClient.  # noqa: E501
        :type: int
        """

        self._sensor_id = sensor_id

    @property
    def temperatur(self):
        """Gets the temperatur of this AlertClient.  # noqa: E501


        :return: The temperatur of this AlertClient.  # noqa: E501
        :rtype: int
        """
        return self._temperatur

    @temperatur.setter
    def temperatur(self, temperatur):
        """Sets the temperatur of this AlertClient.


        :param temperatur: The temperatur of this AlertClient.  # noqa: E501
        :type: int
        """

        self._temperatur = temperatur

    @property
    def alert_type(self):
        """Gets the alert_type of this AlertClient.  # noqa: E501


        :return: The alert_type of this AlertClient.  # noqa: E501
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this AlertClient.


        :param alert_type: The alert_type of this AlertClient.  # noqa: E501
        :type: str
        """

        self._alert_type = alert_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertClient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
