# coding: utf-8

"""
    Smoker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MeasurementSmoker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'measurement_id': 'str',
        'fire_sensor': 'float',
        'content_sensor': 'float',
        'sensor1': 'float',
        'sensor2': 'float',
        'sensor3': 'float',
        'sensor4': 'float',
        'time_stamp': 'datetime',
        'open_close_state': 'float',
        'is_auto_mode': 'bool'
    }

    attribute_map = {
        'measurement_id': 'measurementId',
        'fire_sensor': 'fireSensor',
        'content_sensor': 'contentSensor',
        'sensor1': 'sensor1',
        'sensor2': 'sensor2',
        'sensor3': 'sensor3',
        'sensor4': 'sensor4',
        'time_stamp': 'timeStamp',
        'open_close_state': 'openCloseState',
        'is_auto_mode': 'isAutoMode'
    }

    def __init__(self, measurement_id=None, fire_sensor=None, content_sensor=None, sensor1=None, sensor2=None, sensor3=None, sensor4=None, time_stamp=None, open_close_state=None, is_auto_mode=None):  # noqa: E501
        """MeasurementSmoker - a model defined in Swagger"""  # noqa: E501
        self._measurement_id = None
        self._fire_sensor = None
        self._content_sensor = None
        self._sensor1 = None
        self._sensor2 = None
        self._sensor3 = None
        self._sensor4 = None
        self._time_stamp = None
        self._open_close_state = None
        self._is_auto_mode = None
        self.discriminator = None
        if measurement_id is not None:
            self.measurement_id = measurement_id
        if fire_sensor is not None:
            self.fire_sensor = fire_sensor
        if content_sensor is not None:
            self.content_sensor = content_sensor
        if sensor1 is not None:
            self.sensor1 = sensor1
        if sensor2 is not None:
            self.sensor2 = sensor2
        if sensor3 is not None:
            self.sensor3 = sensor3
        if sensor4 is not None:
            self.sensor4 = sensor4
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if open_close_state is not None:
            self.open_close_state = open_close_state
        if is_auto_mode is not None:
            self.is_auto_mode = is_auto_mode

    @property
    def measurement_id(self):
        """Gets the measurement_id of this MeasurementSmoker.  # noqa: E501


        :return: The measurement_id of this MeasurementSmoker.  # noqa: E501
        :rtype: str
        """
        return self._measurement_id

    @measurement_id.setter
    def measurement_id(self, measurement_id):
        """Sets the measurement_id of this MeasurementSmoker.


        :param measurement_id: The measurement_id of this MeasurementSmoker.  # noqa: E501
        :type: str
        """

        self._measurement_id = measurement_id

    @property
    def fire_sensor(self):
        """Gets the fire_sensor of this MeasurementSmoker.  # noqa: E501


        :return: The fire_sensor of this MeasurementSmoker.  # noqa: E501
        :rtype: float
        """
        return self._fire_sensor

    @fire_sensor.setter
    def fire_sensor(self, fire_sensor):
        """Sets the fire_sensor of this MeasurementSmoker.


        :param fire_sensor: The fire_sensor of this MeasurementSmoker.  # noqa: E501
        :type: float
        """

        self._fire_sensor = fire_sensor

    @property
    def content_sensor(self):
        """Gets the content_sensor of this MeasurementSmoker.  # noqa: E501


        :return: The content_sensor of this MeasurementSmoker.  # noqa: E501
        :rtype: float
        """
        return self._content_sensor

    @content_sensor.setter
    def content_sensor(self, content_sensor):
        """Sets the content_sensor of this MeasurementSmoker.


        :param content_sensor: The content_sensor of this MeasurementSmoker.  # noqa: E501
        :type: float
        """

        self._content_sensor = content_sensor

    @property
    def sensor1(self):
        """Gets the sensor1 of this MeasurementSmoker.  # noqa: E501


        :return: The sensor1 of this MeasurementSmoker.  # noqa: E501
        :rtype: float
        """
        return self._sensor1

    @sensor1.setter
    def sensor1(self, sensor1):
        """Sets the sensor1 of this MeasurementSmoker.


        :param sensor1: The sensor1 of this MeasurementSmoker.  # noqa: E501
        :type: float
        """

        self._sensor1 = sensor1

    @property
    def sensor2(self):
        """Gets the sensor2 of this MeasurementSmoker.  # noqa: E501


        :return: The sensor2 of this MeasurementSmoker.  # noqa: E501
        :rtype: float
        """
        return self._sensor2

    @sensor2.setter
    def sensor2(self, sensor2):
        """Sets the sensor2 of this MeasurementSmoker.


        :param sensor2: The sensor2 of this MeasurementSmoker.  # noqa: E501
        :type: float
        """

        self._sensor2 = sensor2

    @property
    def sensor3(self):
        """Gets the sensor3 of this MeasurementSmoker.  # noqa: E501


        :return: The sensor3 of this MeasurementSmoker.  # noqa: E501
        :rtype: float
        """
        return self._sensor3

    @sensor3.setter
    def sensor3(self, sensor3):
        """Sets the sensor3 of this MeasurementSmoker.


        :param sensor3: The sensor3 of this MeasurementSmoker.  # noqa: E501
        :type: float
        """

        self._sensor3 = sensor3

    @property
    def sensor4(self):
        """Gets the sensor4 of this MeasurementSmoker.  # noqa: E501


        :return: The sensor4 of this MeasurementSmoker.  # noqa: E501
        :rtype: float
        """
        return self._sensor4

    @sensor4.setter
    def sensor4(self, sensor4):
        """Sets the sensor4 of this MeasurementSmoker.


        :param sensor4: The sensor4 of this MeasurementSmoker.  # noqa: E501
        :type: float
        """

        self._sensor4 = sensor4

    @property
    def time_stamp(self):
        """Gets the time_stamp of this MeasurementSmoker.  # noqa: E501


        :return: The time_stamp of this MeasurementSmoker.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this MeasurementSmoker.


        :param time_stamp: The time_stamp of this MeasurementSmoker.  # noqa: E501
        :type: datetime
        """

        self._time_stamp = time_stamp

    @property
    def open_close_state(self):
        """Gets the open_close_state of this MeasurementSmoker.  # noqa: E501


        :return: The open_close_state of this MeasurementSmoker.  # noqa: E501
        :rtype: float
        """
        return self._open_close_state

    @open_close_state.setter
    def open_close_state(self, open_close_state):
        """Sets the open_close_state of this MeasurementSmoker.


        :param open_close_state: The open_close_state of this MeasurementSmoker.  # noqa: E501
        :type: float
        """

        self._open_close_state = open_close_state

    @property
    def is_auto_mode(self):
        """Gets the is_auto_mode of this MeasurementSmoker.  # noqa: E501


        :return: The is_auto_mode of this MeasurementSmoker.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_mode

    @is_auto_mode.setter
    def is_auto_mode(self, is_auto_mode):
        """Sets the is_auto_mode of this MeasurementSmoker.


        :param is_auto_mode: The is_auto_mode of this MeasurementSmoker.  # noqa: E501
        :type: bool
        """

        self._is_auto_mode = is_auto_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeasurementSmoker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeasurementSmoker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
