// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Model.Dababase;

namespace api.Migrations
{
    [DbContext(typeof(SmokerDBContext))]
    [Migration("20200607123938_IsAutoMode")]
    partial class IsAutoMode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Model.Dababase.Alert", b =>
                {
                    b.Property<Guid>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLERT_ID")
                        .HasColumnType("char(36)");

                    b.Property<int>("AlertType")
                        .HasColumnName("ALERT_TYPE")
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnName("SENSOR_ID")
                        .HasColumnType("int");

                    b.Property<Guid>("SettingsId")
                        .HasColumnName("FK_SETTING_ID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Temperatur")
                        .HasColumnName("TEMPERATUR")
                        .HasColumnType("int");

                    b.HasKey("AlertId");

                    b.HasIndex("SettingsId");

                    b.ToTable("ALERT");
                });

            modelBuilder.Entity("api.Model.Dababase.Measurement", b =>
                {
                    b.Property<Guid>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MEASUREMENT_ID")
                        .HasColumnType("char(36)");

                    b.Property<double>("ContentSensor")
                        .HasColumnName("CONTENT_SENSOR")
                        .HasColumnType("double");

                    b.Property<double>("FireSensor")
                        .HasColumnName("FIRE_SENSOR")
                        .HasColumnType("double");

                    b.Property<bool>("IsAutoMode")
                        .HasColumnName("IS_AUTO_MODE")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("OpenCloseState")
                        .HasColumnName("OPEN_CLOSE_STATE")
                        .HasColumnType("double");

                    b.Property<double>("Sensor1")
                        .HasColumnName("SENSOR_1")
                        .HasColumnType("double");

                    b.Property<double>("Sensor2")
                        .HasColumnName("SENSOR_2")
                        .HasColumnType("double");

                    b.Property<double>("Sensor3")
                        .HasColumnName("SENSOR_3")
                        .HasColumnType("double");

                    b.Property<double>("Sensor4")
                        .HasColumnName("SENSOR_4")
                        .HasColumnType("double");

                    b.Property<DateTime>("TimeStampSmoker")
                        .HasColumnName("TIME_STAMP_SMOKER")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TimeStampeReceived")
                        .HasColumnName("TIME_STAMP_RECEIVED")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MeasurementId");

                    b.ToTable("MEASUREMENT");
                });

            modelBuilder.Entity("api.Model.Dababase.Settings", b =>
                {
                    b.Property<Guid>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SETTINGS_ID")
                        .HasColumnType("char(36)");

                    b.Property<int?>("FireNotifcationTemperatur")
                        .HasColumnName("FIRE_NOTIFCATION_TEMPERATUR")
                        .HasColumnType("int");

                    b.Property<bool>("IsAutoMode")
                        .HasColumnName("IS_AUTO_MODE")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastSettingsActivation")
                        .HasColumnName("LAST_SETTINGS_ACTIVATION")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastSettingsUpdate")
                        .HasColumnName("LAST_SETTINGS_UPDATE")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastSettingsUpdateUser")
                        .HasColumnName("LASAT_SETTINGS_UPDATE_USER")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OpenCloseTreshold")
                        .HasColumnName("OPEN_CLOSE_TRESHOLD")
                        .HasColumnType("int");

                    b.Property<int>("TemperaturUpdateCycleSeconds")
                        .HasColumnName("TEMPERATUR_UPDATE_CYCLE_SECONDS")
                        .HasColumnType("int");

                    b.HasKey("SettingsId");

                    b.ToTable("SETTING");
                });

            modelBuilder.Entity("api.Model.Dababase.Alert", b =>
                {
                    b.HasOne("api.Model.Dababase.Settings", "Settings")
                        .WithMany("Alerts")
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
